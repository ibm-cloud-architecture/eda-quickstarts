app.version=0.0.1

quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.native.additional-build-args =-H:ResourceConfigurationFiles=.*\.json
quarkus.swagger-ui.always-include=true
#quarkus.http.cors=true
quarkus.http.port=8080

#################################
# Source to Image to openshift 
quarkus.openshift.route.expose=true
quarkus.openshift.labels.app=qs-order-ms
quarkus.openshift.env.configmaps=qs-order-mgr-cm
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.from-secret=${KAFKA_CA_CERT_NAME:dev-cluster-ca-cert}
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.with-key=ca.password
quarkus.openshift.mounts.kafka-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.kafka-cert.secret-name=${KAFKA_CA_CERT_NAME:dev-cluster-ca-cert}
# TLS user
quarkus.openshift.env.mapping.KAFKA_SSL_KEYSTORE_PASSWORD.from-secret=tls-user
quarkus.openshift.env.mapping.KAFKA_SSL_KEYSTORE_PASSWORD.with-key=user.password
quarkus.openshift.mounts.user-cert.path=/deployments/certs/user
quarkus.openshift.secret-volumes.user-cert.secret-name=${KAFKA_USER:tls-user}


kafka.topic.name=orders
kafka.bootstrap.servers=localhost:9092
kafka.producer.timeout.sec=10
kafka.producer.acks=all
kafka.producer.clientID=qs-prod-01
kafka.producer.idempotence=true
kafka.producer.retries=0
kafka.value.serializer=ibm.eda.demo.ordermgr.infra.events.OrderEventSerializer
kafka.key.serializer=org.apache.kafka.common.serialization.StringSerializer
%prod.kafka.security.protocol=SSL
%prod.kafka.ssl.protocol=TLSv1.2
%prod.kafka.ssl.truststore.location=/deployments/certs/server/ca.p12
%prod.kafka.ssl.truststore.type=PKCS12
%prod.kafka.ssl.keystore.location=/deployments/certs/user/user.p12
%prod.kafka.ssl.keystore.type=PKCS12
