quarkus.application.name=product-mgr
quarkus.application.version=0.0.1
quarkus.http.cors=true
quarkus.log.console.level=INFO

quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.theme=feeling-blue
quarkus.swagger-ui.title=Product Mgr API

%dev.mp.openapi.extensions.smallrye.info.title=Product Microservice API (development)
mp.openapi.extensions.smallrye.info.title=Product Microservice API
mp.openapi.extensions.smallrye.info.version=1.0.0
mp.openapi.extensions.smallrye.info.description=Just an example of kafka consumer and service
mp.openapi.extensions.smallrye.info.termsOfService=Demonstration purpose
mp.openapi.extensions.smallrye.info.contact.name=IBM Technical Asset and Architecture team 
mp.openapi.extensions.smallrye.info.contact.url=https://ibm-cloud-architecture/refarch-eda
mp.openapi.extensions.smallrye.info.license.name=Apache 2.0
mp.openapi.extensions.smallrye.info.license.url=http://www.apache.org/licenses/LICENSE-2.0.html

quarkus.http.port=8080
# When deploying as openshift app using s2i for example
quarkus.openshift.expose=true
quarkus.openshift.labels.app=product-mgr
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
quarkus.container-image.name=product-mgr
quarkus.container-image.group=ibmcase
quarkus.container-image.version=0.0.1

quarkus.openshift.env.configmaps=product-mgr-cm
# In case we need secrets -> quarkus.openshift.env.secrets=product-mgr-secrets
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.from-secret=light-es-cluster-ca-cert
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.with-key=ca.password
quarkus.openshift.mounts.es-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.es-cert.secret-name=light-es-cluster-ca-cert


kafka.brokers=localhost:9092
kafka.topic.name=products
kafka.consumer.groupid=product-consumer-gp
kafka.consumer.commit=true
kafka.consumer.offsetPolicy=earliest
# This is for demo purpose. As this code is used in MirrorMaker lab. Set to -1 for infinite loop
kafka.consumer.poll.records=20
kafka.consumer.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
kafka.consumer.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
kafka.consumer.poll.timeout=3000
mm2.source.cluster.alias=es-src
mm2.target.cluster.alias=es-tgt
# kafka.security.protocol=""