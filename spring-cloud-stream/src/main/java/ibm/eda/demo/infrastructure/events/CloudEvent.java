/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ibm.eda.demo.infrastructure.events;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Avro data schema for Order domain Cloud Events */
@org.apache.avro.specific.AvroGenerated
public class CloudEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6822164588413244872L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CloudEvent\",\"namespace\":\"ibm.eda.demo.infrastructure.events\",\"doc\":\"Avro data schema for Order domain Cloud Events\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Type of event\"},{\"name\":\"specversion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"CloudEvents specVersion\"},{\"name\":\"source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The source where this event comes from\"},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"CloudEvents event uniquely id\"},{\"name\":\"time\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Time when this event was created\"},{\"name\":\"dataschema\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Location of the events Avro data schema\"},{\"name\":\"datacontenttype\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Type of the data attributes content\"},{\"name\":\"data\",\"type\":[{\"type\":\"record\",\"name\":\"OrderEvent\",\"fields\":[{\"name\":\"orderID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique ID from source system\"},{\"name\":\"productID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique ID for the product as defined in product catalog\"},{\"name\":\"customerID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique ID for the customer organization\"},{\"name\":\"quantity\",\"type\":\"int\",\"doc\":\"Quantity ordered\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"EventType\",\"symbols\":[\"OrderCreated\",\"OrderUpdated\",\"OrderInTransit\",\"OrderCompleted\",\"OrderRejected\",\"OrderCancelled\"]},\"doc\":\"Type of event\"},{\"name\":\"creationDAte\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Creation date of the order.\"}]}],\"doc\":\"The event\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CloudEvent> ENCODER =
      new BinaryMessageEncoder<CloudEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CloudEvent> DECODER =
      new BinaryMessageDecoder<CloudEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CloudEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CloudEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CloudEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CloudEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CloudEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CloudEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CloudEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CloudEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Type of event */
   private java.lang.String type;
  /** CloudEvents specVersion */
   private java.lang.String specversion;
  /** The source where this event comes from */
   private java.lang.String source;
  /** CloudEvents event uniquely id */
   private java.lang.String id;
  /** Time when this event was created */
   private java.lang.String time;
  /** Location of the events Avro data schema */
   private java.lang.String dataschema;
  /** Type of the data attributes content */
   private java.lang.String datacontenttype;
  /** The event */
   private java.lang.Object data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CloudEvent() {}

  /**
   * All-args constructor.
   * @param type Type of event
   * @param specversion CloudEvents specVersion
   * @param source The source where this event comes from
   * @param id CloudEvents event uniquely id
   * @param time Time when this event was created
   * @param dataschema Location of the events Avro data schema
   * @param datacontenttype Type of the data attributes content
   * @param data The event
   */
  public CloudEvent(java.lang.String type, java.lang.String specversion, java.lang.String source, java.lang.String id, java.lang.String time, java.lang.String dataschema, java.lang.String datacontenttype, java.lang.Object data) {
    this.type = type;
    this.specversion = specversion;
    this.source = source;
    this.id = id;
    this.time = time;
    this.dataschema = dataschema;
    this.datacontenttype = datacontenttype;
    this.data = data;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return specversion;
    case 2: return source;
    case 3: return id;
    case 4: return time;
    case 5: return dataschema;
    case 6: return datacontenttype;
    case 7: return data;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = value$ != null ? value$.toString() : null; break;
    case 1: specversion = value$ != null ? value$.toString() : null; break;
    case 2: source = value$ != null ? value$.toString() : null; break;
    case 3: id = value$ != null ? value$.toString() : null; break;
    case 4: time = value$ != null ? value$.toString() : null; break;
    case 5: dataschema = value$ != null ? value$.toString() : null; break;
    case 6: datacontenttype = value$ != null ? value$.toString() : null; break;
    case 7: data = value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return Type of event
   */
  public java.lang.String getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Type of event
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'specversion' field.
   * @return CloudEvents specVersion
   */
  public java.lang.String getSpecversion() {
    return specversion;
  }


  /**
   * Sets the value of the 'specversion' field.
   * CloudEvents specVersion
   * @param value the value to set.
   */
  public void setSpecversion(java.lang.String value) {
    this.specversion = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The source where this event comes from
   */
  public java.lang.String getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * The source where this event comes from
   * @param value the value to set.
   */
  public void setSource(java.lang.String value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return CloudEvents event uniquely id
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * CloudEvents event uniquely id
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return Time when this event was created
   */
  public java.lang.String getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * Time when this event was created
   * @param value the value to set.
   */
  public void setTime(java.lang.String value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'dataschema' field.
   * @return Location of the events Avro data schema
   */
  public java.lang.String getDataschema() {
    return dataschema;
  }


  /**
   * Sets the value of the 'dataschema' field.
   * Location of the events Avro data schema
   * @param value the value to set.
   */
  public void setDataschema(java.lang.String value) {
    this.dataschema = value;
  }

  /**
   * Gets the value of the 'datacontenttype' field.
   * @return Type of the data attributes content
   */
  public java.lang.String getDatacontenttype() {
    return datacontenttype;
  }


  /**
   * Sets the value of the 'datacontenttype' field.
   * Type of the data attributes content
   * @param value the value to set.
   */
  public void setDatacontenttype(java.lang.String value) {
    this.datacontenttype = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The event
   */
  public java.lang.Object getData() {
    return data;
  }


  /**
   * Sets the value of the 'data' field.
   * The event
   * @param value the value to set.
   */
  public void setData(java.lang.Object value) {
    this.data = value;
  }

  /**
   * Creates a new CloudEvent RecordBuilder.
   * @return A new CloudEvent RecordBuilder
   */
  public static ibm.eda.demo.infrastructure.events.CloudEvent.Builder newBuilder() {
    return new ibm.eda.demo.infrastructure.events.CloudEvent.Builder();
  }

  /**
   * Creates a new CloudEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CloudEvent RecordBuilder
   */
  public static ibm.eda.demo.infrastructure.events.CloudEvent.Builder newBuilder(ibm.eda.demo.infrastructure.events.CloudEvent.Builder other) {
    if (other == null) {
      return new ibm.eda.demo.infrastructure.events.CloudEvent.Builder();
    } else {
      return new ibm.eda.demo.infrastructure.events.CloudEvent.Builder(other);
    }
  }

  /**
   * Creates a new CloudEvent RecordBuilder by copying an existing CloudEvent instance.
   * @param other The existing instance to copy.
   * @return A new CloudEvent RecordBuilder
   */
  public static ibm.eda.demo.infrastructure.events.CloudEvent.Builder newBuilder(ibm.eda.demo.infrastructure.events.CloudEvent other) {
    if (other == null) {
      return new ibm.eda.demo.infrastructure.events.CloudEvent.Builder();
    } else {
      return new ibm.eda.demo.infrastructure.events.CloudEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for CloudEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CloudEvent>
    implements org.apache.avro.data.RecordBuilder<CloudEvent> {

    /** Type of event */
    private java.lang.String type;
    /** CloudEvents specVersion */
    private java.lang.String specversion;
    /** The source where this event comes from */
    private java.lang.String source;
    /** CloudEvents event uniquely id */
    private java.lang.String id;
    /** Time when this event was created */
    private java.lang.String time;
    /** Location of the events Avro data schema */
    private java.lang.String dataschema;
    /** Type of the data attributes content */
    private java.lang.String datacontenttype;
    /** The event */
    private java.lang.Object data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ibm.eda.demo.infrastructure.events.CloudEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.specversion)) {
        this.specversion = data().deepCopy(fields()[1].schema(), other.specversion);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.source)) {
        this.source = data().deepCopy(fields()[2].schema(), other.source);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.time)) {
        this.time = data().deepCopy(fields()[4].schema(), other.time);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.dataschema)) {
        this.dataschema = data().deepCopy(fields()[5].schema(), other.dataschema);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.datacontenttype)) {
        this.datacontenttype = data().deepCopy(fields()[6].schema(), other.datacontenttype);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.data)) {
        this.data = data().deepCopy(fields()[7].schema(), other.data);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing CloudEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(ibm.eda.demo.infrastructure.events.CloudEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.specversion)) {
        this.specversion = data().deepCopy(fields()[1].schema(), other.specversion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.source)) {
        this.source = data().deepCopy(fields()[2].schema(), other.source);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.time)) {
        this.time = data().deepCopy(fields()[4].schema(), other.time);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.dataschema)) {
        this.dataschema = data().deepCopy(fields()[5].schema(), other.dataschema);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.datacontenttype)) {
        this.datacontenttype = data().deepCopy(fields()[6].schema(), other.datacontenttype);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.data)) {
        this.data = data().deepCopy(fields()[7].schema(), other.data);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * Type of event
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Type of event
      * @param value The value of 'type'.
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder setType(java.lang.String value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Type of event
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * Type of event
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'specversion' field.
      * CloudEvents specVersion
      * @return The value.
      */
    public java.lang.String getSpecversion() {
      return specversion;
    }


    /**
      * Sets the value of the 'specversion' field.
      * CloudEvents specVersion
      * @param value The value of 'specversion'.
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder setSpecversion(java.lang.String value) {
      validate(fields()[1], value);
      this.specversion = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'specversion' field has been set.
      * CloudEvents specVersion
      * @return True if the 'specversion' field has been set, false otherwise.
      */
    public boolean hasSpecversion() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'specversion' field.
      * CloudEvents specVersion
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder clearSpecversion() {
      specversion = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * The source where this event comes from
      * @return The value.
      */
    public java.lang.String getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * The source where this event comes from
      * @param value The value of 'source'.
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder setSource(java.lang.String value) {
      validate(fields()[2], value);
      this.source = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * The source where this event comes from
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'source' field.
      * The source where this event comes from
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder clearSource() {
      source = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * CloudEvents event uniquely id
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * CloudEvents event uniquely id
      * @param value The value of 'id'.
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder setId(java.lang.String value) {
      validate(fields()[3], value);
      this.id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * CloudEvents event uniquely id
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'id' field.
      * CloudEvents event uniquely id
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * Time when this event was created
      * @return The value.
      */
    public java.lang.String getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * Time when this event was created
      * @param value The value of 'time'.
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder setTime(java.lang.String value) {
      validate(fields()[4], value);
      this.time = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * Time when this event was created
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'time' field.
      * Time when this event was created
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder clearTime() {
      time = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataschema' field.
      * Location of the events Avro data schema
      * @return The value.
      */
    public java.lang.String getDataschema() {
      return dataschema;
    }


    /**
      * Sets the value of the 'dataschema' field.
      * Location of the events Avro data schema
      * @param value The value of 'dataschema'.
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder setDataschema(java.lang.String value) {
      validate(fields()[5], value);
      this.dataschema = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'dataschema' field has been set.
      * Location of the events Avro data schema
      * @return True if the 'dataschema' field has been set, false otherwise.
      */
    public boolean hasDataschema() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'dataschema' field.
      * Location of the events Avro data schema
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder clearDataschema() {
      dataschema = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'datacontenttype' field.
      * Type of the data attributes content
      * @return The value.
      */
    public java.lang.String getDatacontenttype() {
      return datacontenttype;
    }


    /**
      * Sets the value of the 'datacontenttype' field.
      * Type of the data attributes content
      * @param value The value of 'datacontenttype'.
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder setDatacontenttype(java.lang.String value) {
      validate(fields()[6], value);
      this.datacontenttype = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'datacontenttype' field has been set.
      * Type of the data attributes content
      * @return True if the 'datacontenttype' field has been set, false otherwise.
      */
    public boolean hasDatacontenttype() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'datacontenttype' field.
      * Type of the data attributes content
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder clearDatacontenttype() {
      datacontenttype = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * The event
      * @return The value.
      */
    public java.lang.Object getData() {
      return data;
    }


    /**
      * Sets the value of the 'data' field.
      * The event
      * @param value The value of 'data'.
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder setData(java.lang.Object value) {
      validate(fields()[7], value);
      this.data = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * The event
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'data' field.
      * The event
      * @return This builder.
      */
    public ibm.eda.demo.infrastructure.events.CloudEvent.Builder clearData() {
      data = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CloudEvent build() {
      try {
        CloudEvent record = new CloudEvent();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.String) defaultValue(fields()[0]);
        record.specversion = fieldSetFlags()[1] ? this.specversion : (java.lang.String) defaultValue(fields()[1]);
        record.source = fieldSetFlags()[2] ? this.source : (java.lang.String) defaultValue(fields()[2]);
        record.id = fieldSetFlags()[3] ? this.id : (java.lang.String) defaultValue(fields()[3]);
        record.time = fieldSetFlags()[4] ? this.time : (java.lang.String) defaultValue(fields()[4]);
        record.dataschema = fieldSetFlags()[5] ? this.dataschema : (java.lang.String) defaultValue(fields()[5]);
        record.datacontenttype = fieldSetFlags()[6] ? this.datacontenttype : (java.lang.String) defaultValue(fields()[6]);
        record.data = fieldSetFlags()[7] ? this.data :  defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CloudEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<CloudEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CloudEvent>
    READER$ = (org.apache.avro.io.DatumReader<CloudEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










