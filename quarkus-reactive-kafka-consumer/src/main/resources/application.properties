# used to development and debug
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.log.console.color=true
quarkus.http.port=8083
# # all configuration to connect to kafka
# mp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL
# mp.messaging.connector.smallrye-kafka.ssl.protocol=TLSv1.2
# mp.messaging.connector.smallrye-kafka.sasl.mechanism=SCRAM-SHA-512
# mp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username=${KAFKA_SCRAM_USERNAME} password=${KAFKA_SCRAM_PASSWORD};
# mp.messaging.connector.smallrye-kafka.ssl.truststore.location=${KAFKA_SSL_TRUSTSTORE_LOCATION}
# mp.messaging.connector.smallrye-kafka.ssl.truststore.password=${KAFKA_SSL_TRUSTSTORE_PASSWORD}
# mp.messaging.connector.smallrye-kafka.ssl.truststore.type=PKCS12
# # configuration to read messages
# mp.messaging.connector.smallrye-kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS}
# mp.messaging.incoming.my-data-stream.connector=smallrye-kafka
# mp.messaging.incoming.my-data-stream.topic=${KAFKA_TOPIC}
# mp.messaging.incoming.my-data-stream.value.deserializer=org.apache.kafka.common.serialization.DoubleDeserializer
# Source to Image to openshift 
quarkus.openshift.route.expose=true
quarkus.openshift.env.configmaps=qs-order-mgr-cm
quarkus.openshift.labels.app=qs-order-rms
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.from-secret=my-kafka-cluster-ca-cert
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.with-key=ca.password
quarkus.openshift.mounts.kafka-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.kafka-cert.secret-name=my-kafka-cluster-ca-cert
# TLS user
quarkus.openshift.env.mapping.KAFKA_SSL_KEYSTORE_PASSWORD.from-secret=tls-user
quarkus.openshift.env.mapping.KAFKA_SSL_KEYSTORE_PASSWORD.with-key=user.password
quarkus.openshift.mounts.user-cert.path=/deployments/certs/user
quarkus.openshift.secret-volumes.user-cert.secret-name=tls-user
# Kafka
%prod.mp.messaging.connector.smallrye-kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS}
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=${ES_APICURIO_URL}
%prod.mp.messaging.connector.smallrye-kafka.security.protocol=SSL
%prod.mp.messaging.connector.smallrye-kafka.ssl.protocol=TLSv1.2
%prod.mp.messaging.connector.smallrye-kafka.ssl.truststore.location=/deployments/certs/server/ca.p12
%prod.mp.messaging.connector.smallrye-kafka.ssl.truststore.type=PKCS12
%prod.mp.messaging.connector.smallrye-kafka.ssl.truststore.password=${KAFKA_SSL_TRUSTSTORE_PASSWORD}
%prod.mp.messaging.connector.smallrye-kafka.ssl.keystore.location=/deployments/certs/user/user.p12
%prod.mp.messaging.connector.smallrye-kafka.ssl.keystore.type=PKCS12
%prod.mp.messaging.connector.smallrye-kafka.ssl.keystore.password=${KAFKA_SSL_KEYSTORE_PASSWORD}
mp.messaging.incoming.order-stream.connector=smallrye-kafka
mp.messaging.incoming.order-stream.topic=qs-orders
# mp.messaging.incoming.order-stream.key.deserializer=org.apache.kafka.common.serialization.Deserializer
mp.messaging.incoming.order-stream.value.deserializer=io.apicurio.registry.serde.avro.AvroKafkaDeserializer
mp.messaging.incoming.order-stream.apicurio.registry.schema-resolver=io.apicurio.registry.serde.DefaultSchemaResolver